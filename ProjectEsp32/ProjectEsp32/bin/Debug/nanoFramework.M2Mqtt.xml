<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nanoFramework.M2Mqtt</name>
    </assembly>
    <members>
        <member name="T:nanoFramework.M2Mqtt.Messages.ConnectionClosedRequestEventArgs">
            <summary>
            Event Args class for DISCONNECT message received from server
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.ConnectionClosedRequestEventArgs.Message">
            <summary>
            Message received from client
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.ConnectionClosedRequestEventArgs.#ctor(nanoFramework.M2Mqtt.Messages.MqttMsgDisconnect)">
            <summary>
            Constructor
            </summary>
            <param name="disconnect">DISCONNECT message received from client</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.ConnectionOpenedEventArgs">
            <summary>
            Event Args class for CONNECT message received from client
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.ConnectionOpenedEventArgs.Message">
            <summary>
            Message received from client
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.ConnectionOpenedEventArgs.#ctor(nanoFramework.M2Mqtt.Messages.MqttMsgConnack)">
            <summary>
            Constructor
            </summary>
            <param name="connact">CONNECT message received from client</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMessageType">
            <summary>
            MQTT Message Type
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.Connect">
            <summary>
            Connection request
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.ConnectAck">
            <summary>
            Connect acknowledgment
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.Publish">
            <summary>
            Publish message
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.PublishAck">
            <summary>
            Publish acknowledgment (QoS 1)
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.PublishReceived">
            <summary>
            Publish received (QoS 2 delivery part 1)
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.PublishRelease">
            <summary>
            Publish release (QoS 2 delivery part 2)
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.PublishComplete">
            <summary>
            Publish complete (QoS 2 delivery part 3)
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.Subscribe">
            <summary>
            Subscribe request
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.SubscribeAck">
            <summary>
            Subscribe acknowledgment
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.Unsubscribe">
            <summary>
            Unsubscribe request
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.UnsubscribeAck">
            <summary>
            Unsubscribe acknowledgment
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.PingRequest">
            <summary>
            PING request
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.PingResponse">
            <summary>
            PING response
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.Disconnect">
            <summary>
            Disconnect notification
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMessageType.Authentication">
            <summary>
            Authentication exchange
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgAuthentication">
            <summary>
            Class for AUTH message from broker to client or client to broker
            as part of an extended authentication exchange, such as challenge / response authentication. 
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgAuthentication.AuthenticationMethod">
            <summary>
            Authentication Method, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgAuthentication.AuthenticationData">
            <summary>
            Authentication Data, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgAuthentication.Reason">
            <summary>
            The Reason as a string, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgAuthentication.ReasonCode">
            <summary>
            Return Code, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgAuthentication.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgAuthentication.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgAuthentication.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a PUBREC message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>PUBREC message instance</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgAuthenticationEventArgs">
            <summary>
            Event Args class for CONNECT message received from client
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgAuthenticationEventArgs.Message">
            <summary>
            Message received from client
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgAuthenticationEventArgs.#ctor(nanoFramework.M2Mqtt.Messages.MqttMsgAuthentication)">
            <summary>
            Constructor
            </summary>
            <param name="authentication">CONNECT message received from client</param>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.PayloadFormatIndicator">
            <summary>Byte, PUBLISH, Will Properties</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.MessageExpiryInterval">
            <summary>Four Byte Integer, PUBLISH, Will Properties</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.ContentType">
            <summary>UTF-8 Encoded String, PUBLISH, Will Properties</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.ResponseTopic">
            <summary>UTF-8 Encoded String, PUBLISH, Will Properties</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.CorrelationData">
            <summary>Binary Data, PUBLISH, Will Properties</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.SubscriptionIdentifier">
            <summary>Variable Byte Integer, PUBLISH, SUBSCRIBE</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.SessionExpiryInterval">
            <summary>Four Byte Integer, CONNECT, CONNACK, DISCONNECT</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.AssignedClientIdentifier">
            <summary>UTF-8 Encoded String, CONNACK</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.ServerKeepAlive">
            <summary>Two Byte Integer, CONNACK</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.AuthenticationMethod">
            <summary>UTF-8 Encoded String, CONNECT, CONNACK, AUTH</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.AuthenticationData">
            <summary>Binary Data, CONNECT, CONNACK, AUTH</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.RequestProblemInformation">
            <summary>Byte, CONNECT</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.WillDelayInterval">
            <summary>Four Byte Integer, Will Properties</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.RequestResponseInformation">
            <summary>Byte, CONNECT</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.ResponseInformation">
            <summary>UTF-8 Encoded String, CONNACK</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.ServerReference">
            <summary>UTF-8 Encoded String, CONNACK, DISCONNECT</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.ReasonString">
            <summary>UTF-8 Encoded String, CONNACK, PUBACK, PUBREC, PUBREL, PUBCOMP, SUBACK, UNSUBACK, DISCONNECT, AUTH</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.ReceiveMaximum">
            <summary>Two Byte Integer, CONNECT, CONNACK</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.TopicAliasMaximum">
            <summary>Two Byte Integer, CONNECT, CONNACK</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.TopicAlias">
            <summary>Two Byte Integer, PUBLISH</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.MaximumQoS">
            <summary>Byte, CONNACK</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.RetainAvailable">
            <summary>Byte, CONNACK</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.UserProperty">
            <summary>UTF-8 String Pair, CONNECT, CONNACK, PUBLISH, Will Properties, PUBACK, PUBREC, PUBREL, PUBCOMP, SUBSCRIBE, SUBACK, UNSUBSCRIBE, UNSUBACK, DISCONNECT, AUTH</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.MaximumPacketSize">
            <summary>Four Byte Integer, CONNECT, CONNACK</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.WildcardSubscriptionAvailable">
            <summary>Byte, CONNACK</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.SubscriptionIdentifierAvailable">
            <summary>Byte, CONNACK</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttProperty.SharedSubscriptionAvailable">
            <summary>Byte, CONNACK</summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttQoSLevel">
            <summary>
            MQTT Quality of Service Level
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttQoSLevel.AtMostOnce">
            <summary>
            QOS At Most Once
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttQoSLevel.AtLeastOnce">
            <summary>
            QOS At Least Once
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttQoSLevel.ExactlyOnce">
            <summary>
            QOS Exactly Once
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttQoSLevel.GrantedFailure">
            <summary>
            Subscribe only QOS Granted Failure [v3.1.1]
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttReasonCode">
            <summary>
            A Reason Code is a one byte unsigned value that indicates the result of an operation.
            Reason Codes less than 0x80 indicate successful completion of an operation.
            The normal Reason Code for success is 0.
            Reason Code values of 0x80 or greater indicate failure.
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.Success">
            <summary>Success</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.NormalDisconnection">
            <summary>Normal disconnection</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.GrantedQoS0">
            <summary>Granted QoS 0</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.GrantedQoS1">
            <summary>Granted QoS 1</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.GrantedQoS2">
            <summary>Granted QoS 2</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.DisconnectWithWillMessage">
            <summary>Disconnect with Will Message</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.NoMatchingSubscribers">
            <summary>No matching subscribers</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.NoSubscriptionExisted">
            <summary>No subscription existed</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ContinueAuthentication">
            <summary>Continue authentication</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ReAuthenticate">
            <summary>Re-authenticate</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.UnspecifiedError">
            <summary>Unspecified error</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.MalformedPacket">
            <summary>Malformed Packet</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ProtocolError">
            <summary>Protocol Error</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ImplementationSpecificError">
            <summary>Implementation specific error</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.UnsupportedProtocolVersion">
            <summary>Unsupported Protocol Version</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ClientIdentifierNotValid">
            <summary>Client Identifier not valid</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.BadUserNameOrPassword">
            <summary>Bad User Name or Password</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.NotAuthorized">
            <summary>Not authorized</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ServerUnavailable">
            <summary>Server unavailable</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ServerBusy">
            <summary>Server busy</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.Banned">
            <summary>Banned</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ServeShuttingDown">
            <summary>Server shutting down</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.BadAuthenticationMethod">
            <summary>Bad authentication method</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.KeepAliveTimeout">
            <summary>Keep Alive timeout</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.SessionTakenOver">
            <summary>Session taken over</summary>
            
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.TopicFilterInvalid">
            <summary>Topic Filter invalid</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.TopicNameInvalid">
            <summary>Topic Name invalid</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.PacketIdentifierInUse">
            <summary>Packet Identifier in use</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.PacketIdentifierNotFound">
            <summary>Packet Identifier not found</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ReceiveMaximumExceeded">
            <summary>Receive Maximum exceeded</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.TopicAliasInvalid">
            <summary>Topic Alias invalid</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.PacketTooLarge">
            <summary>Packet too large</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.MessageRateTooHigh">
            <summary>Message rate too high</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.QuotaExceeded">
            <summary>Quota exceeded</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.AdministrativeAction">
            <summary>Administrative action</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.PayloadFormatInvalid">
            <summary>Payload format invalid</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.RetainNotSupported">
            <summary>Retain not supported</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.QoSNotSupported">
            <summary>QoS not supported</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.UseAnotherServer">
            <summary>Use another server</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ServerMoved">
            <summary>Server moved</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.SharedSubscriptionsNotSupported">
            <summary>Shared Subscriptions not supported</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ConnectionRateExceeded">
            <summary>Connection rate exceeded</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.MaximumConnectTime">
            <summary>Maximum connect time</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.SubscriptionIdentifiersNotSupported">
            <summary>Subscription Identifiers not supported</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.WildcardSubscriptionsNotSupported">
            <summary>Wildcard Subscriptions not supported</summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ConnectionRefusedUnacceptableProtocolVersion">
            <summary>The Server does not support the level of the MQTT protocol requested by the Client, </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ConnectionRefusedIdentifierRejected">
            <summary>The Client identifier is correct UTF-8 but not allowed by the Server, </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ConnectionRefusedServerUnavailable">
            <summary>The Network Connection has been made but the MQTT service is unavailable, </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ConnectionRefusedBadUserNameOrPassword">
            <summary>The data in the user name or password is malformed, </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttReasonCode.ConnectionRefusedNotAuthorized">
            <summary>The Client is not authorized to connect, </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttRetainHandeling">
            <summary>
            Retain Handling option. This option specifies whether retained messages are sent when the subscription is established.
            This does not affect the sending of retained messages at any point after the subscribe.
            If there are no retained messages matching the Topic Filter, all of these values act the same.
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttRetainHandeling.AllTime">
            <summary>
            Send retained messages at the time of the subscribe
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttRetainHandeling.SubscribeTimeOnly">
            <summary>
            Send retained messages at subscribe only if the subscription does not currently exist
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttRetainHandeling.NoRetain">
            <summary>
            Do not send retained messages at the time of the subscribe
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.UserProperty">
            <summary>
            A user property is a key value string pair, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.UserProperty.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.UserProperty.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.UserProperty.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgBase">
            <summary>
            Base class for all MQTT messages
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgBase.Type">
            <summary>
            Message type
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgBase.DupFlag">
            <summary>
            Duplicate message flag
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgBase.QosLevel">
            <summary>
            Quality of Service level
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgBase.Retain">
            <summary>
            Retain message flag
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgBase.MessageId">
            <summary>
            Message identifier for the message
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgBase.UserProperties">
            <summary>
            User Property, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgBase.MaximumPacketSize">
            <summary>
            Maximum Packet Size, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgBase.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns message bytes rapresentation
            </summary>
            <param name="protocolVersion">Protocol version</param>
            <returns>Bytes rapresentation</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgBase.EncodeVariableByte(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encode remaining length and insert it into message buffer
            </summary>
            <param name="remainingLength">Remaining length value to encode</param>
            <param name="buffer">Message buffer for inserting encoded value</param>
            <param name="index">Index from which insert encoded value into buffer</param>
            <returns>Index updated</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgBase.DecodeVariableByte(nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Decode remaining length reading bytes from socket
            </summary>
            <param name="channel">Channel from reading bytes</param>
            <returns>Decoded remaining length</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgConnack">
            <summary>
            Class for CONNACK message from broker to client
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.SessionPresent">
            <summary>
            Session present flag
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.ReturnCode">
            <summary>
            Return Code
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.SessionExpiryInterval">
            <summary>
            Session Expiry Interval, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.ReceiveMaximum">
            <summary>
            Receive Maximum, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.MaximumQoS">
            <summary>
            True if there is a maximum QoS, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.RetainAvailable">
            <summary>
            True if retain is available, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.AssignedClientIdentifier">
            <summary>
            The client ID to use to connect to the server. This must replace the initial Client ID used for the connection, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.TopicAliasMaximum">
            <summary>
            TopicAliasMaximum, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.Reason">
            <summary>
            The Reason as a string, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.WildcardSubscriptionAvailable">
            <summary>
            True if Wildcard Subscription are Available on the server, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.SubscriptionIdentifiersAvailable">
            <summary>
            True if Subscription Identifiers are Available on the server, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.SharedSubscriptionAvailable">
            <summary>
            True if Shared Subscription are Available on the server, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.ServerKeepAlive">
            <summary>
            Use this value instead of the one present in the client sent on Connect, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.ResponseInformation">
            <summary>
            Used as the basis for creating a Response Topic, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.ServerReference">
            <summary>
            Used by the Client to identify another Server to use, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.AuthenticationMethod">
            <summary>
            Authentication Method, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.AuthenticationData">
            <summary>
            Authentication Data, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a CONNACK message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>CONNACK message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgConnack.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgConnect">
            <summary>
            Class for CONNECT message from client to broker
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.ProtocolName">
            <summary>
            Protocol name
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.ProtocolVersion">
            <summary>
            Protocol version
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.ClientId">
            <summary>
            Client identifier
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.WillRetain">
            <summary>
            Will retain flag
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.WillQosLevel">
            <summary>
            Will QOS level
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.WillFlag">
            <summary>
            Will flag
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.WillTopic">
            <summary>
            Will topic
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.WillMessage">
            <summary>
            Will message
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.CleanSession">
            <summary>
            Clean session flag
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.KeepAlivePeriod">
            <summary>
            Keep alive period
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.AuthenticationMethod">
            <summary>
            Authentication Method, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.AuthenticationData">
            <summary>
            Authentication Data, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.SessionExpiryInterval">
            <summary>
            Session Expiry Interval, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.RequestProblemInformation">
            <summary>
            Request Problem Information, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.RequestResponseInformation">
            <summary>
            Request Response Information, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.ReceiveMaximum">
            <summary>
            ReceiveMaximum, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.TopicAliasMaximum">
            <summary>
            TopicAliasMaximum, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.WillDelayInterval">
            <summary>
            Will Delay Interval, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="clientId">Client identifier</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.#ctor(System.String,System.String,System.String,System.Boolean,nanoFramework.M2Mqtt.Messages.MqttQoSLevel,System.Boolean,System.String,System.String,System.Boolean,System.UInt16,nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Constructor
            </summary>
            <param name="clientId">Client identifier</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="willRetain">Will retain flag</param>
            <param name="willQosLevel">Will QOS level</param>
            <param name="willFlag">Will flag</param>
            <param name="willTopic">Will topic</param>
            <param name="willMessage">Will message</param>
            <param name="cleanSession">Clean sessione flag</param>
            <param name="keepAlivePeriod">Keep alive period</param>
            <param name="protocolVersion">MQTT Protocol version</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a CONNECT message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>CONNECT message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns></returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgConnect.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgConnectEventArgs">
            <summary>
            Event Args class for CONNECT message received from client
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgConnectEventArgs.Message">
            <summary>
            Message received from client
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgConnectEventArgs.#ctor(nanoFramework.M2Mqtt.Messages.MqttMsgConnect)">
            <summary>
            Constructor
            </summary>
            <param name="connect">CONNECT message received from client</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgContext">
            <summary>
            Context for MQTT message
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgContext.Message">
            <summary>
            MQTT message
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgContext.State">
            <summary>
            MQTT message state
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgContext.Flow">
            <summary>
            Flow of the message
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgContext.Timestamp">
            <summary>
            Timestamp in ticks (for retry)
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgContext.Attempt">
            <summary>
            Attempt (for retry)
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgContext.Key">
            <summary>
            Unique key
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgFlow">
            <summary>
            Flow of the message
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgFlow.ToPublish">
            <summary>
            To publish to subscribers
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgFlow.ToAcknowledge">
            <summary>
            To acknowledge to publisher
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgState">
            <summary>
            MQTT message state
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.QueuedQos0">
            <summary>
            QOS = 0, Message queued
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.QueuedQos1">
            <summary>
            QOS = 1, Message queued
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.QueuedQos2">
            <summary>
            QOS = 2, Message queued
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.WaitForPuback">
            <summary>
            QOS = 1, PUBLISH sent, wait for PUBACK
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.WaitForPubrec">
            <summary>
            QOS = 2, PUBLISH sent, wait for PUBREC
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.WaitForPubrel">
            <summary>
            QOS = 2, PUBREC sent, wait for PUBREL
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.WaitForPubcomp">
            <summary>
            QOS = 2, PUBREL sent, wait for PUBCOMP
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.SendPubrec">
            <summary>
            QOS = 2, start first phase handshake send PUBREC
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.SendPubrel">
            <summary>
            QOS = 2, start second phase handshake send PUBREL
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.SendPubcomp">
            <summary>
            QOS = 2, end second phase handshake send PUBCOMP
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.SendPuback">
            <summary>
            QOS = 1, PUBLISH received, send PUBACK
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.SendSubscribe">
            <summary>
            Send SUBSCRIBE message
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.SendUnsubscribe">
            <summary>
            Send UNSUBSCRIBE message
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.WaitForSuback">
            <summary>
            (QOS = 1), SUBSCRIBE sent, wait for SUBACK
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.WaitForUnsuback">
            <summary>
            (QOS = 1), UNSUBSCRIBE sent, wait for UNSUBACK
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Messages.MqttMsgState.WaitForAuthentication">
            <summary>
            After CONNECT if Authentication Method is not empty, v5.0 only
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgDisconnect">
            <summary>
            Class for DISCONNECT message from client to broker
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgDisconnect.SessionExpiryInterval">
            <summary>
            Session Expiry Interval, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgDisconnect.Reason">
            <summary>
            The Reason as a string, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgDisconnect.ServerReference">
            <summary>
            Used by the Client to identify another Server to use, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgDisconnect.ResonCode">
            <summary>
            Reason Code, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgDisconnect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgDisconnect.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a DISCONNECT message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>DISCONNECT message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgDisconnect.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgDisconnect.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgPingReq">
            <summary>
            Class for PINGREQ message from client to broker
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPingReq.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPingReq.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPingReq.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a PINGREQ message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>PINGREQ message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPingReq.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgPingResp">
            <summary>
            Class for PINGRESP message from client to broker
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPingResp.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPingResp.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a PINGRESP message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>PINGRESP message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPingResp.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPingResp.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgPuback">
            <summary>
            Class for PUBACK message from broker to client
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPuback.ReasonCode">
            <summary>
            Return Code, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPuback.Reason">
            <summary>
            The Reason as a string, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPuback.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPuback.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPuback.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a PUBACK message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>PUBACK message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPuback.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgPubcomp">
            <summary>
            Class for PUBCOMP message from broker to client
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPubcomp.ReasonCode">
            <summary>
            Return Code, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPubcomp.Reason">
            <summary>
            The Reason as a string, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPubcomp.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPubcomp.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPubcomp.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a PUBCOMP message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>PUBCOMP message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPubcomp.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgPublish">
            <summary>
            Class for PUBLISH message from client to broker
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.Topic">
            <summary>
            Message topic
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.Message">
            <summary>
            Message data
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.IsPayloadUTF8">
            <summary>
            True if the payload is UTF8 encoded, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.MessageExpiryInterval">
            <summary>
            Message Expiry Interval. If the server did not managed to process it on time, the message must be deleted.
            Value is the lifetime of the Will Message in seconds and is sent as the Publication Expiry Interval when the Server publishes the Will Message.
            v5.0 only
            </summary>
            <remarks>The value 0 is the default one, it means, it is not present</remarks>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.TopicAlias">
            <summary>
            Used instead of the Topic to reduce size of the Publish packet, v5.0 only
            </summary>
            <remarks>The 0 value is not permitted.
            The client must not send value higher than the Topic Alias Maximum received in the Connack/Connect message.</remarks>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.ResponseTopic">
            <summary>
            Response Topic is used as the Topic Name for a response message, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.CorrelationData">
            <summary>
            The Correlation Data is used by the sender of the Request Message to identify which request the Response Message is for when it is received, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.SubscriptionIdentifier">
            <summary>
            The Subscription Identifier can have the value of 1 to 268,435,455, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.ContentType">
            <summary>
            The content of the Application Message, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.#ctor(System.String,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="topic">Message topic</param>
            <param name="message">Message data</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.#ctor(System.String,System.Byte[],System.Boolean,nanoFramework.M2Mqtt.Messages.MqttQoSLevel,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="topic">Message topic</param>
            <param name="message">Message data</param>
            <param name="dupFlag">Duplicate flag</param>
            <param name="qosLevel">Quality of Service level</param>
            <param name="retain">Retain flag</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a PUBLISH message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>PUBLISH message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPublish.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgPublishedEventArgs">
            <summary>
            Event Args class for published message
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublishedEventArgs.MessageId">
            <summary>
            Message identifier
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublishedEventArgs.IsPublished">
            <summary>
            Message published (or failed due to retries)
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPublishedEventArgs.#ctor(System.UInt16)">
            <summary>
            Constructor (published message)
            </summary>
            <param name="messageId">Message identifier published</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPublishedEventArgs.#ctor(System.UInt16,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="messageId">Message identifier</param>
            <param name="isPublished">Publish flag</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgPublishEventArgs">
            <summary>
            Event Args class for PUBLISH message received from broker
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublishEventArgs.Topic">
            <summary>
            Message topic
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublishEventArgs.Message">
            <summary>
            Message data
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublishEventArgs.DupFlag">
            <summary>
            Duplicate message flag
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublishEventArgs.QosLevel">
            <summary>
            Quality of Service level
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPublishEventArgs.Retain">
            <summary>
            Retain message flag
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPublishEventArgs.#ctor(System.String,System.Byte[],System.Boolean,nanoFramework.M2Mqtt.Messages.MqttQoSLevel,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="topic">Message topic</param>
            <param name="message">Message data</param>
            <param name="dupFlag">Duplicate delivery flag</param>
            <param name="qosLevel">Quality of Service level</param>
            <param name="retain">Retain flag</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgPubrec">
            <summary>
            Class for PUBREC message from broker to client
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPubrec.ReasonCode">
            <summary>
            Return Code, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPubrec.Reason">
            <summary>
            The Reason as a string, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPubrec.#ctor">
            <summary>
            Constructor
            </summary>
            
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPubrec.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPubrec.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a PUBREC message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>PUBREC message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPubrec.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgPubrel">
            <summary>
            Class for PUBREL message from client top broker
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPubrel.ReasonCode">
            <summary>
            Return Code, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgPubrel.Reason">
            <summary>
            The Reason as a string, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPubrel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPubrel.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPubrel.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a PUBREL message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>PUBREL message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgPubrel.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgSuback">
            <summary>
            Class for SUBACK message from broker to client
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSuback.GrantedQoSLevels">
            <summary>
            List of granted QOS Levels
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSuback.ReasonCodes">
            <summary>
            List of granted Reasons, v5.0 only
            </summary>
            <remarks>In v5.0, replaces the GrantedQoSLevels, still the cast will be done in the GrantedQoSLevels.</remarks>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSuback.Reason">
            <summary>
            The Reason as a string, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgSuback.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgSuback.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a SUBACK message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>SUBACK message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgSuback.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgSuback.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe">
            <summary>
            Class for SUBSCRIBE message from client to broker
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.SubscriptionIdentifier">
            <summary>
            The Subscription Identifier can have the value of 1 to 268,435,455, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.RetainHandeling">
            <summary>
            Retain Handling option. This option specifies whether retained messages are sent when the subscription is established, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.RetainAsPublished">
            <summary>
             If true, Application Messages forwarded using this subscription keep the RETAIN flag they were published with.
             If false, Application Messages forwarded using this subscription have the RETAIN flag set to 0
             v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.NoLocal">
            <summary>
            If True, Application Messages MUST NOT be forwarded to a connection with a ClientID equal to the ClientID of the publishing connection, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.Topics">
            <summary>
            List of topics to subscribe
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.QoSLevels">
            <summary>
            List of QOS Levels related to topics
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.#ctor(System.String[],nanoFramework.M2Mqtt.Messages.MqttQoSLevel[])">
            <summary>
            Constructor
            </summary>
            <param name="topics">List of topics to subscribe</param>
            <param name="qosLevels">List of QOS Levels related to topics</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a SUBSCRIBE message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>SUBSCRIBE message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribedEventArgs">
            <summary>
            Event Args class for subscribed topics
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribedEventArgs.MessageId">
            <summary>
            Message identifier
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribedEventArgs.GrantedQoSLevels">
            <summary>
            List of granted QOS Levels
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribedEventArgs.#ctor(System.UInt16,nanoFramework.M2Mqtt.Messages.MqttQoSLevel[])">
            <summary>
            Constructor
            </summary>
            <param name="messageId">Message identifier for subscribed topics</param>
            <param name="grantedQosLevels">List of granted QOS Levels</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribeEventArgs">
            <summary>
            Event Args class for subscribe request on topics
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribeEventArgs.MessageId">
            <summary>
            Message identifier
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribeEventArgs.Topics">
            <summary>
            Topics requested to subscribe
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribeEventArgs.QoSLevels">
            <summary>
            List of QOS Levels requested
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgSubscribeEventArgs.#ctor(System.UInt16,System.String[],nanoFramework.M2Mqtt.Messages.MqttQoSLevel[])">
            <summary>
            Constructor
            </summary>
            <param name="messageId">Message identifier for subscribe topics request</param>
            <param name="topics">Topics requested to subscribe</param>
            <param name="qosLevels">List of QOS Levels requested</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgUnsuback">
            <summary>
            Class for UNSUBACK message from broker to client
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgUnsuback.ReasonCode">
            <summary>
            Return Code, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgUnsuback.Reason">
            <summary>
            The Reason as a string, v5.0 only
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgUnsuback.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgUnsuback.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a UNSUBACK message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>UNSUBACK message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgUnsuback.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgUnsuback.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribe">
            <summary>
            Class for UNSUBSCRIBE message from client to broker
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribe.Topics">
            <summary>
            List of topics to unsubscribe
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribe.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribe.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="topics">List of topics to unsubscribe</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribe.Parse(System.Byte,nanoFramework.M2Mqtt.MqttProtocolVersion,nanoFramework.M2Mqtt.IMqttNetworkChannel)">
            <summary>
            Parse bytes for a UNSUBSCRIBE message
            </summary>
            <param name="fixedHeaderFirstByte">First fixed header byte</param>
            <param name="protocolVersion">MQTT Protocol Version</param>
            <param name="channel">Channel connected to the broker</param>
            <returns>UNSUBSCRIBE message instance</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribe.GetBytes(nanoFramework.M2Mqtt.MqttProtocolVersion)">
            <summary>
            Returns the bytes that represents the current object.
            </summary>
            <param name="protocolVersion">MQTT protocol version</param>
            <returns>An array of bytes that represents the current object.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribe.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribedEventArgs">
            <summary>
            Event Args class for unsubscribed topic
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribedEventArgs.MessageId">
            <summary>
            Message identifier
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribedEventArgs.#ctor(System.UInt16)">
            <summary>
            Constructor
            </summary>
            <param name="messageId">Message identifier for unsubscribed topic</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribeEventArgs">
            <summary>
            Event Args class for unsubscribe request on topics
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribeEventArgs.MessageId">
            <summary>
            Message identifier
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribeEventArgs.Topics">
            <summary>
            Topics requested to subscribe
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribeEventArgs.#ctor(System.UInt16,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="messageId">Message identifier for subscribed topics</param>
            <param name="topics">Topics requested to subscribe</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Exceptions.MqttClientException">
            <summary>
            MQTT client exception
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Exceptions.MqttClientException.#ctor(nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode)">
            <summary>
            Constructor
            </summary>
            <param name="errorCode">Error code</param>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Exceptions.MqttClientException.ErrorCode">
            <summary>
            Error code
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode">
            <summary>
            MQTT client error code
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.WillWrong">
            <summary>
            Will error (topic, message or QoS level)
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.KeepAliveWrong">
            <summary>
            Keep alive period too large
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.TopicWildcard">
            <summary>
            Topic contains wildcards
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.TopicLength">
            <summary>
            Topic length wrong
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.QosNotAllowed">
            <summary>
            QoS level not allowed
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.TopicsEmpty">
            <summary>
            Topics list empty for subscribe
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.QosLevelsEmpty">
            <summary>
            Qos levels list empty for subscribe
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.TopicsQosLevelsNotMatch">
            <summary>
            Topics / Qos Levels not match in subscribe
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.WrongBrokerMessage">
            <summary>
            Wrong message from broker
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.WrongMessageId">
            <summary>
            Wrong Message Id
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.InflightQueueFull">
            <summary>
            Inflight queue is full
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.InvalidFlagBits">
            <summary>
            Invalid flag bits received 
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.InvalidConnectFlags">
            <summary>
            Invalid connect flags received
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.InvalidClientId">
            <summary>
            Invalid client id
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.InvalidProtocolName">
            <summary>
            Invalid protocol name
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Exceptions.MqttCommunicationException">
            <summary>
            Exception due to error communication with broker on socket
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Exceptions.MqttCommunicationException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Exceptions.MqttCommunicationException.#ctor(System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="e">Inner Exception</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Exceptions.MqttConnectionException">
            <summary>
            Connection to the broker exception
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Exceptions.MqttConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Connection to the broker exception
            </summary>
            <param name="message">A friendly message of the exception that occurred</param>
            <param name="innerException">Detail on why the exception occurred</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Exceptions.MqttTimeoutException">
            <summary>
            Timeout on receiving from broker exception
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.IMqttNetworkChannel">
            <summary>
            Interface for channel under MQTT library
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.IMqttNetworkChannel.DataAvailable">
            <summary>
            Data available on channel
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.IMqttNetworkChannel.ValidateServerCertificate">
            <summary>
            True to check the certificate when connecting using TLS.
            Disabling this property will bypass the validation of the server root CA certificate.
            Using the library this way it's unsecured and, therefore, not recommended.
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.IMqttNetworkChannel.Receive(System.Byte[])">
            <summary>
            Receive data from the network channel
            </summary>
            <param name="buffer">Data buffer for receiving data</param>
            <returns>Number of bytes received</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.IMqttNetworkChannel.Receive(System.Byte[],System.Int32)">
            <summary>
            Receive data from the network channel with a specified timeout
            </summary>
            <param name="buffer">Data buffer for receiving data</param>
            <param name="timeout">Timeout on receiving (in milliseconds)</param>
            <returns>Number of bytes received</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.IMqttNetworkChannel.Send(System.Byte[])">
            <summary>
            Send data on the network channel to the broker
            </summary>
            <param name="buffer">Data buffer to send</param>
            <returns>Number of byte sent</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.IMqttNetworkChannel.Close">
            <summary>
            Close the network channel
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.IMqttNetworkChannel.Connect">
            <summary>
            Connect to remote server
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.IMqttNetworkChannel.Accept">
            <summary>
            Accept client connection
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Internal.InternalEvent">
            <summary>
            Generic internal event for dispatching
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Internal.MsgInternalEvent">
            <summary>
            Internal event with a message
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Internal.MsgInternalEvent.Message">
            <summary>
            Related message
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Internal.MsgInternalEvent.#ctor(nanoFramework.M2Mqtt.Messages.MqttMsgBase)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Related message</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Internal.MsgPublishedInternalEvent">
            <summary>
            Internal event for a published message
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Internal.MsgPublishedInternalEvent.IsPublished">
            <summary>
            Message published (or failed due to retries)
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Internal.MsgPublishedInternalEvent.#ctor(nanoFramework.M2Mqtt.Messages.MqttMsgBase,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Message published</param>
            <param name="isPublished">Publish flag</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttClient">
            <summary>
            MQTT Client
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttClient.MqttMsgPublishEventHandler">
            <summary>
            Delegate that defines event handler for PUBLISH message received
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttClient.MqttMsgPublishedEventHandler">
            <summary>
            Delegate that defines event handler for published message
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttClient.MqttMsgSubscribedEventHandler">
            <summary>
            Delegate that defines event handler for subscribed topic
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttClient.MqttMsgUnsubscribedEventHandler">
            <summary>
            Delegate that defines event handler for unsubscribed topic
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttClient.MqttMsgAuthenticationEventHandler">
            <summary>
            Delegate that defines event handler for authentication topic, v5.0 only
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttClient.ConnectionOpenedEventHandler">
            <summary>
            Delegate that defines event handler for unsubscribed topic
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttClient.ConnectionClosedEventHandler">
            <summary>
            Delegate that defines event handler for client/peer disconnection
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttClient.ConnectionClosedRequestEventHandler">
            <summary>
            Delegate that defines event handler for server disconnection request
            </summary>
        </member>
        <member name="E:nanoFramework.M2Mqtt.MqttClient.MqttMsgPublishReceived">
            <summary>
            The event for PUBLISH message received
            </summary>
        </member>
        <member name="E:nanoFramework.M2Mqtt.MqttClient.MqttMsgPublished">
            <summary>
            The event for published message
            </summary>
        </member>
        <member name="E:nanoFramework.M2Mqtt.MqttClient.MqttMsgSubscribed">
            <summary>
            The event for subscribed topic
            </summary>
        </member>
        <member name="E:nanoFramework.M2Mqtt.MqttClient.MqttMsgUnsubscribed">
            <summary>
            The event for unsubscribed topic
            </summary>
        </member>
        <member name="E:nanoFramework.M2Mqtt.MqttClient.ConnectionOpened">
            <summary>
            The event for peer/client disconnection
            </summary>
        </member>
        <member name="E:nanoFramework.M2Mqtt.MqttClient.ConnectionClosed">
            <summary>
            The event for peer/client disconnection
            </summary>
        </member>
        <member name="E:nanoFramework.M2Mqtt.MqttClient.ConnectionClosedRequest">
            <summary>
            The event for peer/client disconnection
            </summary>
        </member>
        <member name="E:nanoFramework.M2Mqtt.MqttClient.Authentication">
            <summary>
            The event for peer/client disconnection
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.IsConnected">
            <summary>
            Connection status between client and broker
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.ClientId">
            <summary>
            Client identifier
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.CleanSession">
            <summary>
            Clean session flag
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.WillFlag">
            <summary>
            Will flag
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.WillQosLevel">
            <summary>
            Will QOS level
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.WillTopic">
            <summary>
            Will topic
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.WillMessage">
            <summary>
            Will message
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.ProtocolVersion">
            <summary>
            MQTT protocol version
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.AuthenticationMethod">
            <summary>
            Authentication Method, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.AuthenticationData">
            <summary>
            Authentication Data, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.SessionExpiryInterval">
            <summary>
            Session Expiry Interval, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.RequestProblemInformation">
            <summary>
            Request Problem Information, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.RequestResponseInformation">
            <summary>
            Request Response Information, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.ReceiveMaximum">
            <summary>
            ReceiveMaximum, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.TopicAliasMaximum">
            <summary>
            TopicAliasMaximum, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.WillDelayInterval">
            <summary>
            Will Delay Interval, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.UserProperties">
            <summary>
            User Property, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.MaximumPacketSize">
            <summary>
            Maximum Packet Size, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.IsAuthenticationFlow">
            <summary>
            Set to true if you have an authentication flow, v5.0 only
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttClient.Settings">
            <summary>
            MQTT client settings
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="brokerHostName">Broker Host Name or IP Address</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.#ctor(System.String,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Certificate,nanoFramework.M2Mqtt.MqttSslProtocols)">
            <summary>
            Constructor
            </summary>
            <param name="brokerHostName">Broker Host Name or IP Address</param>
            <param name="brokerPort">Broker port</param>
            <param name="secure">Using secure connection</param>
            <param name="caCert">CA certificate for secure connection</param>
            <param name="clientCert">Client certificate</param>
            <param name="sslProtocol">SSL/TLS protocol</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Init(System.String,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Certificate,nanoFramework.M2Mqtt.MqttSslProtocols)">
            <summary>
            MqttClient initialization
            </summary>
            <param name="brokerHostName">Broker Host Name or IP Address</param>
            <param name="brokerPort">Broker port</param>
            <param name="secure">>Using secure connection</param>
            <param name="caCert">CA certificate for secure connection</param>
            <param name="clientCert">Client certificate</param>
            <param name="sslProtocol">SSL/TLS protocol version</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Connect(System.String)">
            <summary>
            Connect to broker
            </summary>
            <param name="clientId">Client identifier</param>
            <returns>Return code of CONNACK message from broker</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Connect(System.String,System.Boolean)">
            <summary>
            Connect to broker
            </summary>
            <param name="clientId">Client identifier</param>
            <param name="cleanSession">Clean sessione flag</param>
            <returns>Return code of CONNACK message from broker</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Connect(System.String,System.String,System.String)">
            <summary>
            Connect to broker
            </summary>
            <param name="clientId">Client identifier</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <returns>Return code of CONNACK message from broker</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Connect(System.String,System.String,System.String,System.Boolean,System.UInt16)">
            <summary>
            Connect to broker
            </summary>
            <param name="clientId">Client identifier</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="cleanSession">Clean sessione flag</param>
            <param name="keepAlivePeriod">Keep alive period</param>
            <returns>Return code of CONNACK message from broker</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Connect(System.String,System.String,System.String,System.Boolean,nanoFramework.M2Mqtt.Messages.MqttQoSLevel,System.Boolean,System.String,System.String,System.Boolean,System.UInt16)">
            <summary>
            Connect to broker
            </summary>
            <param name="clientId">Client identifier</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="willRetain">Will retain flag</param>
            <param name="willQosLevel">Will QOS level</param>
            <param name="willFlag">Will flag</param>
            <param name="willTopic">Will topic</param>
            <param name="willMessage">Will message</param>
            <param name="cleanSession">Clean sessione flag</param>
            <param name="keepAlivePeriod">Keep alive period</param>
            <returns>Return code of CONNACK message from broker</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Disconnect">
            <summary>
            Disconnect from broker
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Close">
            <summary>
            Close client
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Ping">
            <summary>
            Execute ping to broker for keep alive
            </summary>
            <returns>PINGRESP message from broker</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Subscribe(System.String[],nanoFramework.M2Mqtt.Messages.MqttQoSLevel[])">
            <summary>
            Subscribe for message topics
            </summary>
            <param name="topics">List of topics to subscribe</param>
            <param name="qosLevels">QOS levels related to topics</param>
            <returns>Message Id related to SUBSCRIBE message</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Unsubscribe(System.String[])">
            <summary>
            Unsubscribe for message topics
            </summary>
            <param name="topics">List of topics to unsubscribe</param>
            <returns>Message Id in UNSUBACK message from broker</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Publish(System.String,System.Byte[])">
            <summary>
            Publish a message asynchronously (QoS Level <see cref="F:nanoFramework.M2Mqtt.Messages.MqttQoSLevel.AtMostOnce"/> and not retained).
            </summary>
            <param name="topic">Message topic.</param>
            <param name="message">Message data (payload).</param>
            <returns>Message Id related to PUBLISH message.</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Publish(System.String,System.Byte[],System.String)">
            <summary>
            Publish a message asynchronously (QoS Level <see cref="F:nanoFramework.M2Mqtt.Messages.MqttQoSLevel.AtMostOnce"/> and not retained).
            </summary>
            <param name="topic">Message topic.</param>
            <param name="message">Message data (payload).</param>
            <param name="contentType">Content of the application message. This is only available for MQTT v5.0.</param>
            <returns>Message Id related to PUBLISH message.</returns>
            <exception cref="T:System.NotSupportedException">If setting a parameter that is not supported in the MQTT version set for this <see cref="T:nanoFramework.M2Mqtt.MqttClient"/>.</exception>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Publish(System.String,System.Byte[],System.String,System.Collections.ArrayList)">
            <summary>
            Publish a message asynchronously (QoS Level <see cref="F:nanoFramework.M2Mqtt.Messages.MqttQoSLevel.AtMostOnce"/> and not retained).
            </summary>
            <param name="topic">Message topic.</param>
            <param name="message">Message data (payload).</param>
            <param name="contentType">Content of the application message. This is only available for MQTT v5.0.</param>
            <param name="userProperties">User properties for the application message. This is only available for MQTT v5.0</param>
            <returns>Message Id related to PUBLISH message.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="userProperties"/> elements aren't of type <see cref="T:nanoFramework.M2Mqtt.Messages.UserProperty"/>.</exception>
            <exception cref="T:System.NotSupportedException">If setting a parameter that is not supported in the MQTT version set for this <see cref="T:nanoFramework.M2Mqtt.MqttClient"/>.</exception>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Publish(System.String,System.Byte[],System.String,System.Collections.ArrayList,nanoFramework.M2Mqtt.Messages.MqttQoSLevel,System.Boolean)">
            <summary>
            Publish a message asynchronously.
            </summary>
            <param name="topic">Message topic.</param>
            <param name="message">Message data (payload).</param>
            <param name="contentType">Content of the application message. This is only available for MQTT v5.0.</param>
            <param name="userProperties">User properties for the application message. This is only available for MQTT v5.0</param>
            <param name="qosLevel">QoS Level.</param>
            <param name="retain">Retain flag.</param>
            <returns>Message Id related to PUBLISH message.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="userProperties"/> elements aren't of type <see cref="T:nanoFramework.M2Mqtt.Messages.UserProperty"/>.</exception>
            <exception cref="T:System.NotSupportedException">If setting a parameter that is not supported in the MQTT version set for this <see cref="T:nanoFramework.M2Mqtt.MqttClient"/>.</exception>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.OnInternalEvent(nanoFramework.M2Mqtt.Internal.InternalEvent)">
            <summary>
            Wrapper method for raising events
            </summary>
            <param name="internalEvent">Internal event</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.OnConnectionClosing">
            <summary>
            Wrapper method for raising closing connection event
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.OnMqttMsgPublishReceived(nanoFramework.M2Mqtt.Messages.MqttMsgPublish)">
            <summary>
            Wrapper method for raising PUBLISH message received event
            </summary>
            <param name="publish">PUBLISH message received</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.OnMqttMsgPublished(System.UInt16,System.Boolean)">
            <summary>
            Wrapper method for raising published message event
            </summary>
            <param name="messageId">Message identifier for published message</param>
            <param name="isPublished">Publish flag</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.OnMqttMsgSubscribed(nanoFramework.M2Mqtt.Messages.MqttMsgSuback)">
            <summary>
            Wrapper method for raising subscribed topic event
            </summary>
            <param name="suback">SUBACK message received</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.OnMqttMsgUnsubscribed(System.UInt16)">
            <summary>
            Wrapper method for raising unsubscribed topic event
            </summary>
            <param name="messageId">Message identifier for unsubscribed topic</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.OnConnectionClosed">
            <summary>
            Wrapper method for peer/client disconnection
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Send(System.Byte[])">
            <summary>
            Send a message
            </summary>
            <param name="msgBytes">Message bytes</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.Send(nanoFramework.M2Mqtt.Messages.MqttMsgBase)">
            <summary>
            Send a message
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.SendReceive(System.Byte[],System.Int32)">
            <summary>
            Send a message to the broker and wait answer
            </summary>
            <param name="msgBytes">Message bytes</param>
            <param name="timeout">Timeout for receiving answer</param>
            <returns>MQTT message response</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.SendReceive(nanoFramework.M2Mqtt.Messages.MqttMsgBase)">
            <summary>
            Send a message to the broker and wait answer
            </summary>
            <param name="msg">Message</param>
            <returns>MQTT message response</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.SendReceive(nanoFramework.M2Mqtt.Messages.MqttMsgBase,System.Int32)">
            <summary>
            Send a message to the broker and wait answer
            </summary>
            <param name="msg">Message</param>
            <param name="timeout">Timeout for receiving answer</param>
            <returns>MQTT message response</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.EnqueueInflight(nanoFramework.M2Mqtt.Messages.MqttMsgBase,nanoFramework.M2Mqtt.Messages.MqttMsgFlow)">
            <summary>
            Enqueue a message into the inflight queue
            </summary>
            <param name="msg">Message to enqueue</param>
            <param name="flow">Message flow (publish, acknowledge)</param>
            <returns>Message enqueued or not</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.EnqueueInternal(nanoFramework.M2Mqtt.Messages.MqttMsgBase)">
            <summary>
            Enqueue a message into the internal queue
            </summary>
            <param name="msg">Message to enqueue</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.ReceiveThread">
            <summary>
            Thread for receiving messages
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.KeepAliveThread">
            <summary>
            Thread for handling keep alive message
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.DispatchEventThread">
            <summary>
            Thread for raising event
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.ProcessInflightThread">
            <summary>
            Process inflight messages queue
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.RestoreSession">
            <summary>
            Restore session
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.GetMessageId">
            <summary>
            Generate the next message identifier
            </summary>
            <returns>Message identifier</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttClient.MqttMsgContextFinder">
            <summary>
            Finder class for PUBLISH message inside a queue
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttClient.MqttMsgContextFinder.#ctor(System.UInt16,nanoFramework.M2Mqtt.Messages.MqttMsgFlow)">
            <summary>
            Constructor
            </summary>
            <param name="messageId">Message Id</param>
            <param name="flow">Message flow inside inflight queue</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttProtocolVersion">
            <summary>
            MQTT protocol version
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttProtocolVersion.Version_3_1">
            <summary>
            MQTT protocol version 3.1
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttProtocolVersion.Version_3_1_1">
            <summary>
            MQTT protocol version 3.1.1
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttProtocolVersion.Version_5">
            <summary>
            MQTT protocol version 5.0
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttSslProtocols">
            <summary>
            Supported SSL/TLS protocol versions
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSslProtocols.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSslProtocols.SSLv3">
            <summary>
            SSL version 3
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSslProtocols.TLSv1_0">
            <summary>
            TLS version 1.0
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSslProtocols.TLSv1_1">
            <summary>
            TLS version 1.1
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSslProtocols.TLSv1_2">
            <summary>
            TLS version 1.2
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSslProtocols.TLSv1_3">
            <summary>
            TLS version 1.3
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttSettings">
            <summary>
            Settings class for the MQTT broker
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSettings.BrokerDefaultPort">
            <summary>
            Default port for the MQTT protocol
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSettings.BrokerDefaultSslPort">
            <summary>
            Default SSL port for the MQTT protocol
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSettings.DefaultTimeout">
            <summary>
            Default timeout on receiving from client
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSettings.MaximumAttemptsRetry">
            <summary>
            Max publish, subscribe and unsubscribe retry for QoS Level 1 or 2
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSettings.DefaultDelayRetry">
            <summary>
            Delay for retry publish, subscribe and unsubscribe for QoS Level 1 or 2.
            This is in ticks, equivalent of 1 second.
            </summary>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSettings.ConnectTimeout">
            <summary>
            Connection Timeout
            </summary>
            <remarks>
            The broker needs to receive the first message (CONNECT)
            within a reasonable amount of time after the initial TCP/IP connection 
            </remarks>
        </member>
        <member name="F:nanoFramework.M2Mqtt.MqttSettings.DefaultInflightQueueSize">
            <summary>
            The default inflight queue size
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttSettings.Port">
            <summary>
            Listening connection port
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttSettings.SslPort">
            <summary>
            Listening connection SSL port
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttSettings.TimeoutOnConnection">
            <summary>
            Timeout on client connection (before receiving CONNECT message)
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttSettings.TimeoutOnReceiving">
            <summary>
            Timeout on receiving
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttSettings.AttemptsOnRetry">
            <summary>
            Attempts on retry
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttSettings.DelayOnRetry">
            <summary>
            Delay on retry
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttSettings.InflightQueueSize">
            <summary>
            Inflight queue size
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttSettings.ValidateServerCertificate">
            <summary>
            True to check the server certificate when connection using TLS.
            Disabling this property will bypass the validation of the server root CA certificate.
            Using the library this way it's unsecured and, therefore, not recommended.
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttSettings.Instance">
            <summary>
            Singleton instance of settings
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Fx">
            <summary>
            Support methods for specific framework
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Fx.StartThread(System.Threading.ThreadStart)">
            <summary>
            Starts the thread
            </summary>
            <param name="threadStart">Thread to start</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Fx.SleepThread(System.Int32)">
            <summary>
            Puts the thread to sleep
            </summary>
            <param name="millisecondsTimeout">Timeout in Milliseconds</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttNetworkChannel">
            <summary>
            Channel to communicate over the network
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttNetworkChannel.RemoteHostName">
            <summary>
            Remote host name
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttNetworkChannel.RemoteIpAddress">
            <summary>
            Remote IP address
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttNetworkChannel.RemotePort">
            <summary>
            Remote port
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttNetworkChannel.DataAvailable">
            <summary>
            Data available on the channel
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.MqttNetworkChannel.ValidateServerCertificate">
            <summary>
            True to check the server certificate when connecting using TLS.
            Disabling this property will bypass the validation of the server root CA certificate.
            Using the library this way it's unsecured and, therefore, not recommended.
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttNetworkChannel.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Constructor
            </summary>
            <param name="socket">Socket opened with the client</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttNetworkChannel.#ctor(System.Net.Sockets.Socket,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate,nanoFramework.M2Mqtt.MqttSslProtocols)">
            <summary>
            Constructor
            </summary>
            <param name="socket">Socket opened with the client</param>
            <param name="secure">Secure connection (SSL/TLS)</param>
            <param name="serverCert">Server X509 certificate for secure connection</param>
            <param name="sslProtocol">SSL/TLS protocol version</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttNetworkChannel.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="remoteHostName">Remote Host name</param>
            <param name="remotePort">Remote port</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttNetworkChannel.#ctor(System.String,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Certificate,nanoFramework.M2Mqtt.MqttSslProtocols)">
            <summary>
            Constructor
            </summary>
            <param name="remoteHostName">Remote Host name</param>
            <param name="remotePort">Remote port</param>
            <param name="secure">Using SSL</param>
            <param name="caCert">CA certificate</param>
            <param name="clientCert">Client certificate</param>
            <param name="sslProtocol">SSL/TLS protocol version</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttNetworkChannel.Connect">
            <summary>
            Connect to remote server
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttNetworkChannel.Send(System.Byte[])">
            <summary>
            Send data on the network channel
            </summary>
            <param name="buffer">Data buffer to send</param>
            <returns>Number of byte sent</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttNetworkChannel.Receive(System.Byte[])">
            <summary>
            Receive data from the network
            </summary>
            <param name="buffer">Data buffer for receiving data</param>
            <returns>Number of bytes received</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttNetworkChannel.Receive(System.Byte[],System.Int32)">
            <summary>
            Receive data from the network channel with a specified timeout
            </summary>
            <param name="buffer">Data buffer for receiving data</param>
            <param name="timeout">Timeout on receiving (in milliseconds)</param>
            <returns>Number of bytes received</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttNetworkChannel.Close">
            <summary>
            Close the network channel
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttNetworkChannel.Accept">
            <summary>
            Accept connection from a remote client
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.IPAddressUtility">
            <summary>
            IPAddress Utility class
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.IPAddressUtility.GetAddressFamily(System.Net.IPAddress)">
            <summary>
            Return AddressFamily for the IP address
            </summary>
            <param name="ipAddress">IP address to check</param>
            <returns>Address family</returns>
        </member>
        <member name="T:nanoFramework.M2Mqtt.MqttSslUtility">
            <summary>
            MQTT SSL utility class
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.MqttSslUtility.ToSslPlatformEnum(nanoFramework.M2Mqtt.MqttSslProtocols)">
            <summary>
            Defines the possible versions of Secure Sockets Layer (SSL).
            </summary>
            <remarks>
            Note: Following the recommendation of the .NET documentation, nanoFramework implementation does not have SSL3 nor Default because those are deprecated and unsecure.
            </remarks>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Session.MqttClientSession">
            <summary>
            MQTT Client Session
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Session.MqttClientSession.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="clientId">Client Id to create session</param>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Session.MqttSession">
            <summary>
            MQTT Session base class
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Session.MqttSession.ClientId">
            <summary>
            Client Id
            </summary>
        </member>
        <member name="P:nanoFramework.M2Mqtt.Session.MqttSession.InflightMessages">
            <summary>
            Messages inflight during session
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Session.MqttSession.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Session.MqttSession.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="clientId">Client Id to create session</param>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Session.MqttSession.Clear">
            <summary>
            Clean session
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Utility.QueueExtension">
            <summary>
            Extension class for a Queue
            </summary>
        </member>
        <member name="T:nanoFramework.M2Mqtt.Utility.QueueExtension.QueuePredicate">
            <summary>
            Predicate for searching inside a queue
            </summary>
            <param name="item">Item of the queue</param>
            <returns>Result of predicate</returns>
        </member>
        <member name="M:nanoFramework.M2Mqtt.Utility.QueueExtension.Get(System.Collections.Queue,nanoFramework.M2Mqtt.Utility.QueueExtension.QueuePredicate)">
            <summary>
            Get (without removing) an item from queue based on predicate
            </summary>
            <param name="queue">Queue in which to search</param>
            <param name="predicate">Predicate to verify to get item</param>
            <returns>Item matches the predicate</returns>
        </member>
    </members>
</doc>
